import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
cars = pd.read_csv("CarPrice_Assignment.csv")
numeric_df = cars.select_dtypes(include=['int64', 'float64'])

plt.figure(figsize=(12, 8))
sns.heatmap(numeric_df.corr(), annot=True, fmt=".2f", cmap="coolwarm", linewidths=0.5)
plt.title("Матрица корреляции числовых признаков характеристик машин")
plt.show()
data = cars[["enginesize", "horsepower", "curbweight", "highwaympg", "wheelbase"]]
plt.figure(figsize=(10, 6))
sns.boxplot(data=data)
plt.title("Boxplot для данных")
plt.ylabel("Значения")
plt.show()
X = cars[["curbweight", "highwaympg", "wheelbase"]]
Y = cars['price']
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)
model = LinearRegression()
model.fit(X_train, Y_train)
Y_pred = model.predict(X_test)
mse = mean_squared_error(Y_test, Y_pred)
mae = mean_absolute_error(Y_test, Y_pred)
r2 = r2_score(Y_test, Y_pred)
print(f"MSE: {mse}")
print(f"MAE: {mae}")
print(f"R^2 Score: {r2}")
plt.figure(figsize=(10, 6))
plt.scatter(Y_test, Y_pred, alpha=0.5, label="Предполагаемая цена против Действительной цены")
plt.plot([min(Y_test), max(Y_test)], [min(Y_test), max(Y_test)], color='red', linestyle='--', label="Предполагаемая цена")
plt.xlabel("Действительная")
plt.ylabel("Предполагаемая")
plt.title("Предполагаемая цена против Действительной цены")
plt.legend()
plt.show()
